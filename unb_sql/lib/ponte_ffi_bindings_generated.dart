// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/header.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class PonteFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PonteFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PonteFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Transforma comando customizado em SQL.
  /// Retorna NULL em caso de erro sintático.
  /// O ponteiro retornado deve ser liberado com free_translated_string.
  ffi.Pointer<ffi.Char> translate_to_sql(
    ffi.Pointer<ffi.Char> custom_command,
  ) {
    return _translate_to_sql(
      custom_command,
    );
  }

  late final _translate_to_sqlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('translate_to_sql');
  late final _translate_to_sql = _translate_to_sqlPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// Libera a memória da string SQL devolvida pela função acima.
  void free_translated_string(
    ffi.Pointer<ffi.Char> sql_string,
  ) {
    return _free_translated_string(
      sql_string,
    );
  }

  late final _free_translated_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'free_translated_string');
  late final _free_translated_string = _free_translated_stringPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}
